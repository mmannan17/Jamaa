# Generated by Django 4.2.3 on 2025-05-26 02:32

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('mosque', 'Mosque'), ('organization', 'Organization'), ('user', 'User'), ('guest', 'Guest')], max_length=12)),
                ('latitude', models.FloatField(default=0.0, null=True)),
                ('longitude', models.FloatField(default=0.0, null=True)),
                ('grid_cell_lat', models.IntegerField(default=0.0)),
                ('grid_cell_lon', models.IntegerField(default=0.0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='customuser_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Mosque',
            fields=[
                ('mosque_id', models.AutoField(primary_key=True, serialize=False)),
                ('mosquename', models.CharField(max_length=50)),
                ('email', models.CharField(max_length=100, unique=True)),
                ('password', models.CharField(default='', max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('profile_pic', models.CharField(blank=True, max_length=255, null=True)),
                ('prayer_times', models.JSONField(blank=True, default=dict, null=True)),
                ('address', models.CharField(max_length=255, unique=True)),
                ('lat', models.FloatField(default=0.0)),
                ('lon', models.FloatField(default=0.0)),
                ('grid_cell_lat', models.IntegerField(default=0)),
                ('grid_cell_lon', models.IntegerField(default=0)),
                ('nonprofitform', models.FileField(blank=True, default='placeholder.pdf', null=True, upload_to='mosque_verification/')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('can_change_prayer_times', 'Can change prayer times'), ('can_post_announcements', 'Can post announcements'), ('can_put_up_events', 'Can put up events'), ('can_post_media', 'Can post pictures and videos')],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('organization_id', models.AutoField(primary_key=True, serialize=False)),
                ('organization_name', models.CharField(default='', unique=True)),
                ('organization_bio', models.CharField(default='', max_length=255)),
                ('profile_pic', models.CharField(default='', max_length=255)),
                ('email', models.CharField(max_length=100, unique=True)),
                ('password', models.CharField(default='', max_length=255)),
                ('is_verified', models.BooleanField(default=False)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('latitude', models.FloatField(default=0.0, null=True)),
                ('longitude', models.FloatField(default=0.0, null=True)),
                ('grid_cell_lat', models.IntegerField(default=0)),
                ('grid_cell_lon', models.IntegerField(default=0)),
                ('tagged_by', models.ManyToManyField(blank=True, related_name='tagged_organizations', to='myapp.mosque')),
            ],
            options={
                'permissions': [('can_post_announcements', 'Can post announcements'), ('can_put_up_events', 'Can put up events'), ('can_post_media', 'Can post pictures and videos')],
            },
        ),
        migrations.CreateModel(
            name='SharedPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'permissions': [('can_post_announcements', 'Can post announcements'), ('can_put_up_events', 'Can put up events'), ('can_post_media', 'Can post pictures and videos')],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('post_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=32)),
                ('posttype', models.CharField(choices=[('announcement', 'Announcement'), ('media', 'Media Post'), ('event', 'Event')], max_length=20)),
                ('content', models.TextField(blank=True)),
                ('media_type', models.CharField(blank=True, max_length=20)),
                ('media_file', models.URLField(blank=True, null=True)),
                ('event_details', models.CharField(blank=True, max_length=255)),
                ('event_date', models.DateTimeField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_posts', to=settings.AUTH_USER_MODEL)),
                ('mosque', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='myapp.mosque')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='myapp.organization')),
            ],
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_title', models.CharField(max_length=255)),
                ('event_date', models.DateTimeField()),
                ('location', models.CharField(max_length=255)),
                ('event_description', models.TextField()),
                ('rsvp', models.BooleanField(default=False)),
                ('mosque', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='myapp.mosque')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='myapp.organization')),
            ],
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('follow_id', models.AutoField(primary_key=True, serialize=False)),
                ('mosque', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.mosque')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'mosque')},
            },
        ),
    ]
